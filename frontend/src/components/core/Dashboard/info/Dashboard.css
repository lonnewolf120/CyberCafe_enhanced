.Box{
    display: flex; 
    height: 1000px;
    flex-direction: column;
    background-color: #202020;
}
.Box1{
    display: flex;
}


.SubBox1{
    border-radius: 8px;
    height: 500px;
     width: 300px;
     margin: 25px;  
     display: flex;
     flex-direction: column;
     padding-top: 20px;
     background-color: #2b2b2b;
     
}
.SubBox2{
    height: 500px;
    width: 1000px;
     margin-top: 25px;
    border-radius: 8px;

}
.SubBox3{
    height: 210px;
    background-color: #2b2b2b;
    width: 92%;
    margin-top: 0px;
    border-radius: 8px;


}
.SubBox4{
    height: 2500x;
    background-color: #2b2b2b;
     width: 92%;

     margin-top: 20px;
    border-radius: 8px;
    display: flex;
    flex-direction: row;

}

.contain{
    height: 100px;
    margin: 10px;
    margin-top: 4rem;
    display: flex;
    align-items: center;
    justify-content: center;

} 

.u-name{
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: 30px;
    color: white;

}
.a-name{

    font-size: 15px;
    color: wheat;
}
.profile-box{
    text-align: center;
    padding: 20px;
}


.p-info{

    display: flex;
    flex-direction: row;


}
.profile-info{
    width: 50%;
    color: white;
    font-size: 20px;
    margin: 10px;
    padding: 10px;

}
.p-data
{
    width: 50%;
    margin: 10px;
    text-align: right;
}
.profile-data {
    padding-right: 5px;
    padding-left: 5px;
    color: wheat;
    font-size: 20px;
    background-color: #1e2329;
    border-radius: 8px;
    margin: 4px;


}


.chart-container {
    width: 200px; 
    height: 270px; 
    position: relative;
}




.Heatmapbox{
    margin: 25px;
    height: 270px;
    width: 92%;
    border-radius: 8px;
    background-color: #2b2b2b;
    display: flex;

}

.timeline{
    margin: 50px;
    display: flex;
    flex-direction: column;
    
  
}

.timeline-months 
{
    display: flex;
    flex-direction: row;
    margin-left: 35px;
}

.timeline-months-month {
    font-size: 15px;  
    border-radius: 4px;
     padding-right: 58px;
    text-align: center;
    justify-content: center;
    align-items: center;
   
    vertical-align: middle;
}

    

.timeline-cells {
    display: inline-flex;
    flex-direction: column;
    flex-wrap: wrap;
    height: 150px;
    
}



.timeline-cell {

    height: 15px;
    width: 15px;
   /*  border: 1px solid rgba( 0, 0, 0, 0.3); */
    margin: 2px;
    border-radius: 4px;
    background-color: grey;
    
}

.timeline-body {
    display: flex;
    flex-direction: row;

}

.timeline-weeks-week {
    font-size: 15px;  
    height: 15px;
    width: 30px;
    
    margin: 2.5px;
    border-radius: 4px;
    text-align: center;
    justify-content: center;
    align-items: center;
   
    vertical-align: middle;
}

.timeline-cell:hover {
    background-color: #ff0099;
}




/* 


import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Pie, Line } from 'react-chartjs-2';
import './Dashboard.css';
import { Link } from 'react-router-dom';
import { Button } from 'flowbite-react';
import { pieChartData, lineChartData } from './data1.js';
import { Chart as ChartJS, Tooltip, Legend, ArcElement, CategoryScale, LinearScale, LineElement, PointElement, Title } from 'chart.js';  

ChartJS.register(Tooltip, Legend, ArcElement, CategoryScale, LinearScale, LineElement, PointElement, Title);

const Dashboard = () => {
    const [username, setUsername] = useState(''); 
    const [actualName, setActualName] = useState(''); 
    const [submissionData, setSubmissionData] = useState({});

    useEffect(() => {
        axios.get('http://localhost:5000/Dashboard/username')
            .then(response => {
                setUsername(response.data.FIRST_NAME);
                setActualName(response.data.LAST_NAME);
            })
            .catch(error => {
                console.error("Error fetching user data", error);
            });
    }, []);

    useEffect(() => {
        axios.get('http://localhost:5000/Dashboard/submissions/U001') // Replace 'userId' with actual user ID
            .then(response => {
                setSubmissionData(response.data);
                console.log("Submission data", response.data);
            })
            .catch(error => {
                console.error("Error fetching submission data", error);
            });
    }, []);

    return (
        <div>
            <div className="Heatmapbox">
                <Timeline days={364} submissionData={submissionData} />
            </div>
        </div>
    );
};

function Cell({ submissionCount }) {
    const cellStyle = {
        backgroundColor: submissionCount ? `rgba(0, 255, 0, ${Math.min(submissionCount / 10, 1)})` : 'transparent'
    };

    return (
        <div className="timeline-cell" style={cellStyle}>
        </div>
    );
}

function Timeline({ days, submissionData }) {
    let cells = Array.from(new Array(days)).map((_, index) => {
        const date = new Date();
        date.setDate(date.getDate() - (days - index - 1));
        const formattedDate = date.toISOString().split('T')[0];
        return submissionData[formattedDate] || 0;
    });

    return (
        <div className="timeline">
            <div className="timeline-cells">
                {cells.map((count, index) => <Cell key={index} submissionCount={count} />)}
            </div>
        </div>
    );
}

export default Dashboard;
 */